!function(e){"use strict";var t,s,r,n,a;t=function(e){var t,s;for(e=e||{},t=1;t<arguments.length;t+=1)if(arguments[t])for(s in arguments[t])arguments[t].hasOwnProperty(s)&&(e[s]=arguments[t][s]);return e},r=function(e,t,s){var r=document.createElement(e);return r.classList.add(t),r.innerHTML=s,r},n=function(e,t,s,n){var a,o,i=document.createElement("div"),l=document.createElement("p");return i.classList.add("mailchimp-it-response-box"),i.classList.add(t),l.classList.add("mailchimp-it-text"),l.textContent=e,i.appendChild(l),s&&(a=r("div","mailchimp-it-before-response",s),i.insertBefore(a,l)),n&&(o=r("div","mailchimp-it-after-response",n),i.appendChild(o)),i},s=function(){var e=document.createElement("div");return e.classList.add("mailchimpit-loader"),e.innerHTML='<svg class="mailchimp-it-spinner" width="65px" height="65px" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg"><circle class="mailchimp-it-path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle></svg>',e},a=function(e,r){var a,o=document.querySelectorAll(e),i=t({successMessage:"Thanks for subscribing !",successMessageBefore:"<p>Before !</p>",successMessageAfter:"<p>After !</p>",successMessageClassName:"mailchimp-it-success",errorMessageClassName:"mailchimp-it-error",errorMessageBefore:null,errorMessageAfter:null,errorMessageTimeout:5e3,mailInputName:"newsletter_mail",firstNameInputName:"newsletter_first_name",lastNameInputName:"newsletter_last_name",loaderElt:s()},r),l=n(i.successMessage,i.successMessageClassName,i.successMessageBefore,i.successMessageAfter);Array.prototype.forEach.call(o,function(e){if("FORM"!==e.nodeName)console.error("mailchimp-it only works with forms tags, you provide "+e.nodeName,e);else{var t=e.getAttribute("action");e.onsubmit=function(s){s.preventDefault();var r,o=new XMLHttpRequest,c="",m=[],u=e.querySelector("input[name="+i.mailInputName+"]"),p=e.querySelector("input[name="+i.firstNameInputName+"]"),d=e.querySelector("input[name="+i.lastNameInputName+"]"),f={};u&&(f[i.mailInputName]=u.value),p&&(f[i.firstNameInputName]=p.value),d&&(f[i.lastNameInputName]=d.value);for(r in f)f.hasOwnProperty(r)&&m.push(encodeURIComponent(r)+"="+encodeURIComponent(f[r]));c=m.join("&").replace(/%20/g,"+"),o.open("POST",t,!0),o.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),e.parentNode.insertBefore(i.loaderElt,e.nextSibling),e.remove(),o.onload=function(){var t=JSON.parse(o.responseText);o.status>=200&&o.status<400&&"subscribed"===t.status?(console.log("success !"),console.log(o.status),console.log(t),i.loaderElt.parentNode.insertBefore(l,i.loaderElt.nextSibling),i.loaderElt.remove()):(a=n(t.detail,i.errorMessageClassName,i.errorMessageBefore,i.errorMessageAfter),console.error(t),console.error(t.detail),i.loaderElt.parentNode.insertBefore(a,i.loaderElt.nextSibling),i.loaderElt.remove(),window.setTimeout(function(){a.parentNode.insertBefore(e,a.nextSibling),a.remove()},i.errorMessageTimeout))},o.send(c),console.log(c)}}})},e.mailchimpIt=a}(window),window.jQuery&&!function(e,t){"use strict";function s(e,s){t(e,s)}e.fn.tweetParser=function(e){return s(this.selector,e)}}(jQuery,mailchimpIt);
//# sourceMappingURL=data:application/json;base64,
