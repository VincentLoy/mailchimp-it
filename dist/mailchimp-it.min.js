!function(e){"use strict";var t,n,a;t=function(e){var t,n;for(e=e||{},t=1;t<arguments.length;t+=1)if(arguments[t])for(n in arguments[t])arguments[t].hasOwnProperty(n)&&(e[n]=arguments[t][n]);return e},n=function(){var e=document.createElement("div");return e.classList.add("mailchimpit-loader"),e.textContent="Please wait...",e},a=function(e,a){var r=document.querySelectorAll(e),o=t({successMessage:"Thanks for subscribing !",errorMessage:"an error has occurred, please try again later.",mailInputName:"newsletter_mail",firstNameInputName:"newsletter_first_name",lastNameInputName:"newsletter_last_name",loaderElt:n()},a);Array.prototype.forEach.call(r,function(e){if("FORM"!==e.nodeName)console.error("mailchimp-it only works with forms tags, you provide "+e.nodeName,e);else{var t=e.getAttribute("action");e.onsubmit=function(n){n.preventDefault();var a,r=new XMLHttpRequest,s="",u=[],i=e.querySelector("input[name="+o.mailInputName+"]"),l=e.querySelector("input[name="+o.firstNameInputName+"]"),m=e.querySelector("input[name="+o.lastNameInputName+"]"),c={};i&&(c[o.mailInputName]=i.value),l&&(c[o.firstNameInputName]=l.value),m&&(c[o.lastNameInputName]=m.value);for(a in c)u.push(encodeURIComponent(a)+"="+encodeURIComponent(c[a]));s=u.join("&").replace(/%20/g,"+"),r.open("POST",t,!0),r.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),r.onload=function(){if(r.status>=200&&r.status<400){var e=r.responseText;console.log("success !"),console.log(e)}else console.error(JSON.parse(r.responseText)),console.error("baaaaaaaaaaad")},r.send(s),console.log(s)}}})},e.mailchimpIt=a}(window),window.jQuery&&!function(e,t){"use strict";function n(e,n){t(e,n)}e.fn.tweetParser=function(e){return n(this.selector,e)}}(jQuery,mailchimpIt);
//# sourceMappingURL=data:application/json;base64,
