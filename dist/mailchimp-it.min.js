!function(e){"use strict";var t,r,n,a;t=function(e){var t,r;for(e=e||{},t=1;t<arguments.length;t+=1)if(arguments[t])for(r in arguments[t])arguments[t].hasOwnProperty(r)&&(e[r]=arguments[t][r]);return e},n=function(e,t){var r=document.createElement("div");return r.classList.add("mailchimp-it-response-box"),r.classList.add(t),r.textContent=e,r},r=function(){var e=document.createElement("div");return e.classList.add("mailchimpit-loader"),e.textContent="Please wait...",e},a=function(e,a){var s,o=document.querySelectorAll(e),l=t({successMessage:"Thanks for subscribing !",successMessageClassName:"mailchimp-it-success",errorMessageClassName:"mailchimp-it-error",mailInputName:"newsletter_mail",firstNameInputName:"newsletter_first_name",lastNameInputName:"newsletter_last_name",loaderElt:r()},a),i=n(l.successMessage,l.successMessageClassName);Array.prototype.forEach.call(o,function(e){if("FORM"!==e.nodeName)console.error("mailchimp-it only works with forms tags, you provide "+e.nodeName,e);else{var t=e.getAttribute("action");e.onsubmit=function(r){r.preventDefault();var a,o=new XMLHttpRequest,u="",m=[],c=e.querySelector("input[name="+l.mailInputName+"]"),p=e.querySelector("input[name="+l.firstNameInputName+"]"),d=e.querySelector("input[name="+l.lastNameInputName+"]"),f={};c&&(f[l.mailInputName]=c.value),p&&(f[l.firstNameInputName]=p.value),d&&(f[l.lastNameInputName]=d.value);for(a in f)m.push(encodeURIComponent(a)+"="+encodeURIComponent(f[a]));u=m.join("&").replace(/%20/g,"+"),o.open("POST",t,!0),o.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),e.parentNode.insertBefore(l.loaderElt,e.nextSibling),e.remove(),o.onload=function(){var e=JSON.parse(o.responseText);o.status>=200&&o.status<400&&!e.error?(console.log("success !"),console.log(o.status),console.log(e),l.loaderElt.parentNode.insertBefore(i,l.loaderElt.nextSibling),l.loaderElt.remove()):(s=n(e.error,l.errorMessageClassName),console.error(e),console.error(e.error),l.loaderElt.parentNode.insertBefore(s,l.loaderElt.nextSibling),l.loaderElt.remove())},o.send(u),console.log(u)}}})},e.mailchimpIt=a}(window),window.jQuery&&!function(e,t){"use strict";function r(e,r){t(e,r)}e.fn.tweetParser=function(e){return r(this.selector,e)}}(jQuery,mailchimpIt);
//# sourceMappingURL=data:application/json;base64,
